import tensorflow as tf

# common config for STC
tf.app.flags.DEFINE_string("train_src_file", "./data/STC/train/post.train.retrieval", "")
tf.app.flags.DEFINE_string("train_tgt_file", "./data/STC/train/cmnt.train.retrieval", "")
tf.app.flags.DEFINE_string("dev_src_file", "./data/STC/dev/post.dev.retrieval", "")
tf.app.flags.DEFINE_string("dev_tgt_file", "./data/STC/dev/cmnt.dev.retrieval", "")
tf.app.flags.DEFINE_string("test_src_file", "./data/STC/test/post.test.retrieval", "")
tf.app.flags.DEFINE_string("test_tgt_file", "./data/STC/test/cmnt.test.retrieval", "")
tf.app.flags.DEFINE_string("inference_input_file", "./data/STC/test/post.test.retrieval", "")
tf.app.flags.DEFINE_string("inference_ref_file", "./data/STC/test/cmnt.test.retrieval", "")
tf.app.flags.DEFINE_string("ckpt", "", "ckpt file to load")
tf.app.flags.DEFINE_string("optimizer", "adam", "")
tf.app.flags.DEFINE_integer("num_train_steps", 150000, "Num steps to train")
tf.app.flags.DEFINE_integer("steps_per_stats", 100, "How many training steps to do per stats logging, save checkpoint every 10x steps_per_stats")
tf.app.flags.DEFINE_integer("embedding_size", 300, "Size of embedding")
tf.app.flags.DEFINE_integer("hidden_size", 1000, "Size of each layer")
tf.app.flags.DEFINE_integer("batch_size", 128, "Size of batch")
tf.app.flags.DEFINE_integer("infer_batch_size", 64, "Size of batch")
tf.app.flags.DEFINE_integer("epoch_step", 0, "")
tf.app.flags.DEFINE_integer("start_decay_step", 0, "When we start to decay")
tf.app.flags.DEFINE_integer("decay_steps", 1000, "How frequent we decay")
tf.app.flags.DEFINE_integer("beam_width", 10, "Beam width when using beam search decoder. If 0 (default), use standard decoder with greedy helper")
tf.app.flags.DEFINE_float("init_weight", 0.1, "Initial weights from [-this, this]")
tf.app.flags.DEFINE_float("learning_rate", 1e-3, "Learning rate. Adam: 0.001 | 0.0001")
tf.app.flags.DEFINE_float("max_gradient_norm", 5.0, "Clip gradients to this norm")
tf.app.flags.DEFINE_float("decay_factor", 0.5, "How much we decay")
tf.app.flags.DEFINE_float("best_perplexity", 10000.0, "")
tf.app.flags.DEFINE_float("length_penalty_weight", 1.0, "Length penalty for beam search")
tf.app.flags.DEFINE_boolean("time_major", True, "")
tf.app.flags.DEFINE_boolean("colocate_gradients_with_ops", True, "")
tf.app.flags.DEFINE_boolean("source_reverse", False, "Reverse source sequence")
tf.app.flags.DEFINE_boolean("no_bias", False, "Use keyword aware decoder")
tf.app.flags.DEFINE_boolean("no_IR", False, "Use IR")

tf.app.flags.DEFINE_string("out_dir", "./output/ReBoost/", "")
tf.app.flags.DEFINE_string("model_dir", "./output/ReBoost/", "")
tf.app.flags.DEFINE_string("best_model_dir", "./model/best_model/ReBoost/", "")
tf.app.flags.DEFINE_string("train_retrieval_file", "./data/STC/train/post.train.retrieval.padded", "")
tf.app.flags.DEFINE_string("train_retrieval_length_file", "./data/STC/train/post.train.retrieval.pad_length", "")
tf.app.flags.DEFINE_string("train_retrieval_score_file", "./data/STC/train/post.train.retrieval.score.norm", "")
tf.app.flags.DEFINE_string("dev_retrieval_file", "./data/STC/dev/post.dev.retrieval.padded", "")
tf.app.flags.DEFINE_string("dev_retrieval_length_file", "./data/STC/dev/post.dev.retrieval.pad_length", "")
tf.app.flags.DEFINE_string("dev_retrieval_score_file", "./data/STC/dev/post.dev.retrieval.score.norm", "")
tf.app.flags.DEFINE_string("test_retrieval_file", "./data/STC/test/post.test.retrieval.padded", "")
tf.app.flags.DEFINE_string("test_retrieval_length_file", "./data/STC/test/post.test.retrieval.pad_length", "")
tf.app.flags.DEFINE_string("test_retrieval_score_file", "./data/STC/test/post.test.retrieval.score.norm", "")
tf.app.flags.DEFINE_string("inference_output_file", "./output/ReBoost/inference/result.beam_10.test", "")
tf.app.flags.DEFINE_string("src_vocab_file", "./data/STC/src_vocab_file.afterRemoveHFWords", "")
tf.app.flags.DEFINE_string("tgt_vocab_file", "./data/STC/tgt_vocab_file.afterRemoveHFWords", "")
tf.app.flags.DEFINE_string("overlap_matrix", "./data/STC/overlap.retrieval_keywords.pkl", "")
tf.app.flags.DEFINE_string("retrieval_vocab_file", "./data/STC/train_dev.retrieval.keywords", "")
tf.app.flags.DEFINE_integer("src_vocab_size", 40000, "Size of source words vocabulary")
tf.app.flags.DEFINE_integer("tgt_vocab_size", 40000, "Size of target words vocabulary")
tf.app.flags.DEFINE_integer("retrieval_embedding_size", 300, "Size of topic words vocabulary")
tf.app.flags.DEFINE_integer("retrieval_keywords_vocab_size", 5003, "Size of topic words vocabulary")
tf.app.flags.DEFINE_integer("retrieval_num", 10, "")

# common config for OpenSubtitle
# tf.app.flags.DEFINE_string("train_src_file", "./data/OpenSubtitle/train/post.train.retrieval", "")
# tf.app.flags.DEFINE_string("train_tgt_file", "./data/OpenSubtitle/train/cmnt.train.retrieval", "")
# tf.app.flags.DEFINE_string("dev_src_file", "./data/OpenSubtitle/val/post.val.retrieval", "")
# tf.app.flags.DEFINE_string("dev_tgt_file", "./data/OpenSubtitle/val/cmnt.val.retrieval", "")
# tf.app.flags.DEFINE_string("test_src_file", "./data/OpenSubtitle/test/post.test.retrieval", "")
# tf.app.flags.DEFINE_string("test_tgt_file", "./data/OpenSubtitle/test/cmnt.test.retrieval", "")
# tf.app.flags.DEFINE_string("inference_input_file", "./data/OpenSubtitle/test/post.test.retrieval", "")
# tf.app.flags.DEFINE_string("inference_ref_file", "./data/OpenSubtitle/test/cmnt.test.retrieval", "")
# tf.app.flags.DEFINE_string("ckpt", "", "ckpt file to load")
# tf.app.flags.DEFINE_string("optimizer", "adam", "")
# tf.app.flags.DEFINE_integer("num_train_steps", 80000, "Num steps to train")
# tf.app.flags.DEFINE_integer("steps_per_stats", 100, "How many training steps to do per stats logging, save checkpoint every 10x steps_per_stats")
# tf.app.flags.DEFINE_integer("embedding_size", 300, "Size of embedding")
# tf.app.flags.DEFINE_integer("hidden_size", 1000, "Size of each layer")
# tf.app.flags.DEFINE_integer("batch_size", 128, "Size of batch")
# tf.app.flags.DEFINE_integer("infer_batch_size", 128, "Size of batch")
# tf.app.flags.DEFINE_integer("epoch_step", 0, "")
# tf.app.flags.DEFINE_integer("start_decay_step", 0, "When we start to decay")
# tf.app.flags.DEFINE_integer("decay_steps", 1000, "How frequent we decay")
# tf.app.flags.DEFINE_integer("beam_width", 10, "Beam width when using beam search decoder. If 0 (default), use standard decoder with greedy helper")
# tf.app.flags.DEFINE_float("init_weight", 0.1, "Initial weights from [-this, this]")
# tf.app.flags.DEFINE_float("learning_rate", 1e-3, "Learning rate. Adam: 0.001 | 0.0001")
# tf.app.flags.DEFINE_float("max_gradient_norm", 5.0, "Clip gradients to this norm")
# tf.app.flags.DEFINE_float("decay_factor", 0.5, "How much we decay")
# tf.app.flags.DEFINE_float("best_perplexity", 10000.0, "")
# tf.app.flags.DEFINE_float("length_penalty_weight", 1.0, "Length penalty for beam search")
# tf.app.flags.DEFINE_boolean("time_major", True, "")
# tf.app.flags.DEFINE_boolean("colocate_gradients_with_ops", True, "")
# tf.app.flags.DEFINE_boolean("source_reverse", False, "Reverse source sequence")
# tf.app.flags.DEFINE_boolean("no_bias", False, "Use keyword aware decoder")
# tf.app.flags.DEFINE_boolean("no_IR", False, "Use IR")

# tf.app.flags.DEFINE_string("train_retrieval_file", "./data/OpenSubtitle/train/post.train.retrieval.padded", "")
# tf.app.flags.DEFINE_string("train_retrieval_length_file", "./data/OpenSubtitle/train/post.train.retrieval.pad_length", "")
# tf.app.flags.DEFINE_string("train_retrieval_score_file", "./data/OpenSubtitle/train/post.train.retrieval.score.norm", "")
# tf.app.flags.DEFINE_string("dev_retrieval_file", "./data/OpenSubtitle/val/post.val.retrieval.padded", "")
# tf.app.flags.DEFINE_string("dev_retrieval_length_file", "./data/OpenSubtitle/val/post.val.retrieval.pad_length", "")
# tf.app.flags.DEFINE_string("dev_retrieval_score_file", "./data/OpenSubtitle/val/post.val.retrieval.score.norm", "")
# tf.app.flags.DEFINE_string("test_retrieval_file", "./data/OpenSubtitle/test/post.test.retrieval.padded", "")
# tf.app.flags.DEFINE_string("test_retrieval_length_file", "./data/OpenSubtitle/test/post.test.retrieval.pad_length", "")
# tf.app.flags.DEFINE_string("test_retrieval_score_file", "./data/OpenSubtitle/test/post.test.retrieval.score.norm", "")
# tf.app.flags.DEFINE_string("src_vocab_file", "./data/OpenSubtitle/movie_25000", "")
# tf.app.flags.DEFINE_string("tgt_vocab_file", "./data/OpenSubtitle/movie_25000", "")
# tf.app.flags.DEFINE_string("overlap_matrix", "./data/OpenSubtitle/overlap.retrieval_keywords.pkl", "")
# tf.app.flags.DEFINE_string("retrieval_vocab_file", "./data/OpenSubtitle/train_dev.retrieval.keywords", "")
# tf.app.flags.DEFINE_integer("src_vocab_size", 25001, "Size of source words vocabulary")
# tf.app.flags.DEFINE_integer("tgt_vocab_size", 25001, "Size of target words vocabulary")
# tf.app.flags.DEFINE_integer("retrieval_embedding_size", 300, "Size of topic words vocabulary")
# tf.app.flags.DEFINE_integer("retrieval_keywords_vocab_size", 3000, "Size of topic words vocabulary")
# tf.app.flags.DEFINE_integer("retrieval_num", 10, "")

# tf.app.flags.DEFINE_string("out_dir", "./output/OpenSubtitle/ReBoost/", "")
# tf.app.flags.DEFINE_string("model_dir", "./output/OpenSubtitle/ReBoost/", "")
# tf.app.flags.DEFINE_string("best_model_dir", "./model/best_model/OpenSubtitle/ReBoost/", "")
# tf.app.flags.DEFINE_string("inference_output_file", "./output/OpenSubtitle/ReBoost/inference/result.beam_10.test", "")

FLAGS = tf.app.flags.FLAGS